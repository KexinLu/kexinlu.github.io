{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","columns","title","dataIndex","key","render","text","useState","data","setData","stations","useEffect","Object","keys","forEach","k","a","Axios","get","result","d","temperature","toFixed","negative_ion","timer","window","setInterval","clearInterval","className","dataSource","values","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAgEeA,MA1Df,WACE,IAAMC,EAAU,CACd,CACEC,MAAO,eACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACEJ,MAAO,qBACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,eACPC,UAAW,OACXC,IAAK,SAhBI,EAmBaG,mBAAS,IAnBtB,mBAmBLC,EAnBK,KAmBCC,EAnBD,KAoBPC,EAAW,CACf,MAAS,6CACT,MAAS,qBACT,MAAS,2BACT,MAAS,8CAyBX,OAvBEC,qBAAU,WACRC,OAAOC,KAAKH,GAAUI,QAAtB,iBAAAF,OAAA,IAAAA,CAAA,UAA8B,WAAMG,GAAN,iBAAAC,EAAA,sEACPC,IAAMC,IAAN,gEAAmEH,IAD5D,OACtBI,EADsB,QAEtBC,EAAI,IACT,KAAWD,EAAOX,KAAKa,YAAYC,QAAQ,GAC5CF,EAAC,KAAWD,EAAOX,KAAKe,aACxBH,EAAC,KAAWV,EAASK,GACrBN,GAAQ,SAAAD,GAAI,sBAASA,EAAT,eAAgBO,EAAIK,OANJ,2CAA9B,uDAQA,IAAMI,EAAQC,OAAOC,aAAY,WAC/Bd,OAAOC,KAAKH,GAAUI,QAAtB,iBAAAF,OAAA,IAAAA,CAAA,UAA8B,WAAMG,GAAN,iBAAAC,EAAA,sEACPC,IAAMC,IAAN,gEAAmEH,IAD5D,OACtBI,EADsB,QAEtBC,EAAI,IACT,KAAWD,EAAOX,KAAKa,YAAYC,QAAQ,GAC5CF,EAAC,KAAWD,EAAOX,KAAKe,aACxBH,EAAC,KAAWV,EAASK,GACrBN,GAAQ,SAAAD,GAAI,sBAASA,EAAT,eAAgBO,EAAIK,OANJ,2CAA9B,yDAQC,KACH,OAAO,WACLK,OAAOE,cAAcH,MAEtB,IAEH,yBAAKI,UAAU,OACb,kBAAC,IAAD,CAAO3B,QAASA,EAAS4B,WAAYjB,OAAOkB,OAAOtB,KADrD,MC5CgBuB,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAAS9B,OACP,kBAAC,IAAM+B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9473398a.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport { Table, Tag, Space } from 'antd';\nimport Axios from 'axios';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  const columns = [\n    {\n      title: '站点',\n      dataIndex: 'name',\n      key: 'name',\n      render: text => <a>{text}</a>,\n    },\n    {\n      title: '负离子',\n      dataIndex: 'nion',\n      key: 'nion',\n    },\n    {\n      title: '温度',\n      dataIndex: 'temp',\n      key: 'temp',\n    }\n  ];\n  const [ data, setData ] = useState([]);\n  const stations = {\n    'WFT01': '五峰国际大酒店',\n    'WFT02': '柴埠溪',\n    'WFT03': '后河景区',\n    'WFT04': '五峰国际滑雪场',\n  };\n    useEffect(() => {\n      Object.keys(stations).forEach(async k => {\n        const result = await Axios.get(`http://124.70.148.230:1313/v1/weatherdata?station_ids=${k}`)\n        const d = {};\n        d['temp'] = result.data.temperature.toFixed(2);\n        d['nion'] = result.data.negative_ion;\n        d['name'] = stations[k];\n        setData(data => ({...data, [k]: d}));\n      });\n      const timer = window.setInterval(() => {\n        Object.keys(stations).forEach(async k => {\n          const result = await Axios.get(`http://124.70.148.230:1313/v1/weatherdata?station_ids=${k}`)\n          const d = {};\n          d['temp'] = result.data.temperature.toFixed(2);\n          d['nion'] = result.data.negative_ion;\n          d['name'] = stations[k];\n          setData(data => ({...data, [k]: d}));\n        });\n      }, 300000);\n      return () => {\n        window.clearInterval(timer);\n      };\n    }, []);\n  return (\n    <div className=\"App\">\n      <Table columns={columns} dataSource={Object.values(data)} />;\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}